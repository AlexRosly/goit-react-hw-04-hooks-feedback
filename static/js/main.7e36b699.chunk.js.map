{"version":3,"sources":["components/FeedBackOptions/FeedBackOptions.styled.jsx","components/FeedBackOptions/FeedBackOptions.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/FeedBack/FeedBack.jsx","App.js","index.js"],"names":["Button","styled","button","FeedBackOptions","option","onLeaveFeedback","map","type","onClick","name","Sections","div","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Message","p","Notification","message","FeedBack","useState","setGood","setNeutral","setBad","countTotalFeedback","positive","Math","round","countPositiveFeedbackPercentage","e","target","console","log","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAEaA,EAASC,IAAOC,OAAV,oE,OCiBJC,EAdS,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,gBAAV,OACpB,8BACKD,EAAOE,KAAI,SAACF,GAAD,OACR,cAACJ,EAAD,CAAQO,KAAK,SAASC,QAASH,EAA8BI,KAAML,EAAnE,SAA6EA,GAAxBA,SCNpDM,EAAWT,IAAOU,IAAV,8CCaNC,EAXC,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACZ,eAACJ,EAAD,WACI,6BAAKG,IACJC,MCiBMC,EArBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAAoBP,EAAlD,EAAkDA,MAAlD,OACf,gCACI,6BAAKA,IACL,uCAAS,+BAAOG,OAChB,0CAAY,+BAAOC,OACnB,sCAAQ,+BAAOC,OACf,wCAAU,+BAAOC,OACjB,oDAAsB,iCAAOC,EAAP,cCRjBC,EAAUpB,IAAOqB,EAAV,mECYLC,EATM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,cAACH,EAAD,UAAWG,KC6DAC,MA7Df,WACI,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAsBMC,EAAqB,WAE7B,OADcd,EAAOC,EAAUC,GAUnBC,EAAQW,IACRC,EAP8B,WACpC,IAAMZ,EAAQW,IAEd,OADmBE,KAAKC,MAAOjB,EAAOG,EAAS,KAK9Be,GAGrB,OACI,mCACI,eAAC,EAAD,CAASrB,MAAM,wBAAf,UACI,cAAC,EAAD,CACQT,OAAQ,CAAC,OAAQ,UAAW,OAC5BC,gBAxCE,SAAC8B,GAEnB,OADeA,EAAEC,OAAO3B,MAEpB,IAAK,OACDkB,EAAQX,EAAK,GACb,MAEJ,IAAK,UACDY,EAAWX,EAAQ,GACnB,MAEJ,IAAK,MACDY,EAAOX,EAAI,GACX,MAEJ,QACImB,QAAQC,IAAI,aA0BD,IAAVnB,EAAc,cAAC,EAAD,CAAcK,QAAQ,sBAAsC,cAAC,EAAD,CACnEX,MAAM,aACNG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBW,UCtB7BQ,MARf,WACE,OACE,mCACE,cAAC,EAAD,OC1BNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7e36b699.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Button = styled.button`\r\nmargin-left: 10px;\r\npadding: 5px 20px;\r\n`;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"./FeedBackOptions.styled\"\r\n\r\n\r\nconst FeedBackOptions = ({option, onLeaveFeedback}) => (\r\n    <div>\r\n        {option.map((option) => (\r\n            <Button type=\"button\" onClick={onLeaveFeedback} key={option} name={option}>{ option }</Button>\r\n          ))}\r\n    </div>\r\n\r\n)\r\n\r\nFeedBackOptions.propTypes = {\r\n    option: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedBackOptions;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Sections = styled.div`\r\nmargin-left: 50px;`","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {Sections} from \"./Section.styled\"\r\n\r\nconst Section = ({title, children}) => (\r\n    <Sections>\r\n        <h1>{title}</h1>\r\n        {children}\r\n    </Sections>\r\n)\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage, title }) => (\r\n    <div>\r\n        <h2>{title}</h2>\r\n        <p>Good: <span>{good}</span></p>\r\n        <p>Neutral: <span>{neutral}</span></p>\r\n        <p>Bad: <span>{bad}</span></p>\r\n        <p>Total: <span>{total}</span></p>\r\n        <p>Positive feedback: <span>{positivePercentage}%</span></p>\r\n    </div>\r\n\r\n);\r\n\r\nStatistics.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,   \r\n}\r\n\r\nexport default Statistics;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Message = styled.p`\r\n    font-size: 20px;\r\n    color: red;\r\n`\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Message } from \"./Notification.styled\";\r\n\r\n\r\nconst Notification = ({ message }) => (\r\n    <Message>{ message }</Message>\r\n    \r\n)\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification;","import FeedbackOptions from '../FeedBackOptions/FeedBackOptions';\r\nimport Section from '../Section/Section';\r\nimport Statistics from '../Statistics/Statistics';\r\nimport Notification from '../Notification/Notification';\r\nimport React, { useState } from 'react';\r\n\r\nfunction FeedBack() {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n    \r\n    const countFeedBack = (e) => {\r\n        const  name  = e.target.name;\r\n        switch (name) {\r\n            case 'good':\r\n                setGood(good+1);\r\n                break;\r\n            \r\n            case 'neutral':\r\n                setNeutral(neutral+1);\r\n                break;\r\n            \r\n            case 'bad':\r\n                setBad(bad+1);\r\n                break;\r\n\r\n            default:\r\n                console.log(\"error\");\r\n            }\r\n    }  \r\n\r\n    const countTotalFeedback = () => {\r\n\t\tconst total = good + neutral + bad;\r\n\t\treturn total;\r\n    };\r\n\r\n    const countPositiveFeedbackPercentage = () => {\r\n        const total = countTotalFeedback();\r\n        const percentage = Math.round((good / total) * 100);\r\n        return percentage;\r\n    };\r\n\r\n        const total = countTotalFeedback();\r\n        const positive = countPositiveFeedbackPercentage();\r\n\r\n\r\n    return (\r\n        <>        \r\n            <Section title=\"Please leave feedback\">\r\n                <FeedbackOptions\r\n                        option={['good', 'neutral', 'bad']}\r\n                        onLeaveFeedback={countFeedBack}\r\n                />\r\n                {total === 0 ? <Notification message=\"No feedback given\"></Notification> : <Statistics\r\n                        title=\"Statistics\"\r\n                        good={good}\r\n                        neutral={neutral}\r\n                        bad={bad}\r\n                        total={total}\r\n                        positivePercentage={positive}\r\n                />}\r\n            </Section>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default FeedBack;\r\n// class FeedBack extends React.Component {\r\n\r\n//     state = {\r\n//         good: 0,\r\n//         neutral: 0,\r\n//         bad: 0\r\n//     }\r\n\r\n//     countTotalFeedback = () => {\r\n        // const { good, neutral, bad } = this.state;\r\n\t\t// const total = good + neutral + bad;\r\n\t\t// return total;\r\n//     };\r\n\r\n//     countPositiveFeedbackPercentage = () => {\r\n//         const total = this.countTotalFeedback();\r\n//         const { good } = this.state;\r\n//         const percentage = Math.round((good / total) * 100);\r\n//         return percentage;\r\n//     };\r\n\r\n//     countFeedBack = (e) => {\r\n//         const name = e.target.name;\r\n//         this.setState(prevState => ({\r\n//             [name]: prevState[name] + 1,\r\n//         }));\r\n//     };\r\n\r\n//     render() {\r\n//         const { good, neutral, bad } = this.state;\r\n//         const total = this.countTotalFeedback();\r\n//         const positive = this.countPositiveFeedbackPercentage();\r\n\r\n//         return (\r\n//             <>\r\n            //     <Section title=\"Please leave feedback\">\r\n            //         <FeedbackOptions\r\n            //             option={['good', 'neutral', 'bad']}\r\n            //             onLeaveFeedback={this.countFeedBack}\r\n            //         />\r\n            //         {total === 0 ? <Notification message=\"No feedback given\"></Notification> : <Statistics\r\n            //             title=\"Statistics\"\r\n            //             good={good}\r\n            //             neutral={neutral}\r\n            //             bad={bad}\r\n            //             total={total}\r\n            //             positivePercentage={positive}\r\n            //         />}\r\n            //     </Section>\r\n            // </>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default FeedBack;","// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport \"./App.css\";\nimport FeedBack from \"./components/FeedBack/FeedBack.jsx\";\n\nfunction App() {\n  return (\n    <>\n      <FeedBack />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}