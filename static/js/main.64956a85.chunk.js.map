{"version":3,"sources":["components/FeedBackOptions/FeedBackOptions.styled.jsx","components/FeedBackOptions/FeedBackOptions.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/FeedBack/FeedBack.jsx","App.js","index.js"],"names":["Button","styled","button","FeedBackOptions","option","onLeaveFeedback","map","type","onClick","name","Sections","div","Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","Message","p","Notification","message","FeedBack","useState","setGood","setNeutral","setBad","countTotalFeedback","positive","Math","round","countPositiveFeedbackPercentage","e","target","console","log","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uRAEaA,EAASC,IAAOC,OAAV,wE,OCsBJC,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,gBAAX,OACtB,8BACGD,EAAOE,KAAI,SAACF,GAAD,OACV,cAACJ,EAAD,CACEO,KAAK,SACLC,QAASH,EAETI,KAAML,EAJR,SAMGA,GAHIA,SCRAM,EAAWT,IAAOU,IAAV,kDCaNC,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,eAACJ,EAAD,WACE,6BAAKG,IACJC,MCiCUC,EArCI,SAAC,GAAD,IACjBC,EADiB,EACjBA,KACAC,EAFiB,EAEjBA,QACAC,EAHiB,EAGjBA,IACAC,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,mBACAP,EANiB,EAMjBA,MANiB,OAQjB,gCACE,6BAAKA,IACL,uCACQ,+BAAOG,OAEf,0CACW,+BAAOC,OAElB,sCACO,+BAAOC,OAEd,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,cCxBZC,EAAUpB,IAAOqB,EAAV,+DCQLC,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,cAACH,EAAD,UAAUG,KCiEjCC,MA/Df,WACE,MAAwBC,mBAAS,GAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOT,EAAP,KAAgBW,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOR,EAAP,KAAYW,EAAZ,KAsBMC,EAAqB,WAEzB,OADcd,EAAOC,EAAUC,GAU3BC,EAAQW,IACRC,EAPkC,WACtC,IAAMZ,EAAQW,IAEd,OADmBE,KAAKC,MAAOjB,EAAOG,EAAS,KAKhCe,GAEjB,OACE,mCACE,eAAC,EAAD,CAASrB,MAAM,wBAAf,UACE,cAAC,EAAD,CACET,OAAQ,CAAC,OAAQ,UAAW,OAC5BC,gBAvCc,SAAC8B,GAErB,OADaA,EAAEC,OAAO3B,MAEpB,IAAK,OACHkB,GAAQ,SAAAX,GAAI,OAAIA,EAAO,KACvB,MAEF,IAAK,UACHY,GAAW,SAAAX,GAAO,OAAIA,EAAU,KAChC,MAEF,IAAK,MACHY,GAAO,SAAAX,GAAG,OAAIA,EAAM,KACpB,MAEF,QACEmB,QAAQC,IAAI,aAyBD,IAAVnB,EACC,cAAC,EAAD,CAAcK,QAAQ,sBAEtB,cAAC,EAAD,CACEX,MAAM,aACNG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBW,UCxBjBQ,MARf,WACE,OACE,mCACE,cAAC,EAAD,OC1BNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.64956a85.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  padding: 5px 20px;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"./FeedBackOptions.styled\";\n\nconst FeedBackOptions = ({ option, onLeaveFeedback }) => (\n  <div>\n    {option.map((option) => (\n      <Button\n        type=\"button\"\n        onClick={onLeaveFeedback}\n        key={option}\n        name={option}\n      >\n        {option}\n      </Button>\n    ))}\n  </div>\n);\n\nFeedBackOptions.propTypes = {\n  option: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedBackOptions;\n","import styled from \"@emotion/styled\";\n\nexport const Sections = styled.div`\n  margin-left: 50px;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Sections } from \"./Section.styled\";\n\nconst Section = ({ title, children }) => (\n  <Sections>\n    <h1>{title}</h1>\n    {children}\n  </Sections>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n  title,\n}) => (\n  <div>\n    <h2>{title}</h2>\n    <p>\n      Good: <span>{good}</span>\n    </p>\n    <p>\n      Neutral: <span>{neutral}</span>\n    </p>\n    <p>\n      Bad: <span>{bad}</span>\n    </p>\n    <p>\n      Total: <span>{total}</span>\n    </p>\n    <p>\n      Positive feedback: <span>{positivePercentage}%</span>\n    </p>\n  </div>\n);\n\nStatistics.propTypes = {\n  title: PropTypes.string.isRequired,\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import styled from \"@emotion/styled\";\n\nexport const Message = styled.p`\n  font-size: 20px;\n  color: red;\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Message } from \"./Notification.styled\";\n\nconst Notification = ({ message }) => <Message>{message}</Message>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import FeedbackOptions from \"../FeedBackOptions/FeedBackOptions\";\nimport Section from \"../Section/Section\";\nimport Statistics from \"../Statistics/Statistics\";\nimport Notification from \"../Notification/Notification\";\nimport React, { useState } from \"react\";\n\nfunction FeedBack() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const countFeedBack = (e) => {\n    const name = e.target.name;\n    switch (name) {\n      case \"good\":\n        setGood(good => good + 1);\n        break;\n\n      case \"neutral\":\n        setNeutral(neutral => neutral + 1);\n        break;\n\n      case \"bad\":\n        setBad(bad => bad + 1);\n        break;\n\n      default:\n        console.log(\"error\");\n    }\n  };\n\n  const countTotalFeedback = () => {\n    const total = good + neutral + bad;\n    return total;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    const percentage = Math.round((good / total) * 100);\n    return percentage;\n  };\n\n  const total = countTotalFeedback();\n  const positive = countPositiveFeedbackPercentage();\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          option={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={countFeedBack}\n        />\n        {total === 0 ? (\n          <Notification message=\"No feedback given\"></Notification>\n        ) : (\n          <Statistics\n            title=\"Statistics\"\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positive}\n          />\n        )}\n      </Section>\n    </>\n  );\n}\n\nexport default FeedBack;\n// class FeedBack extends React.Component {\n\n//     state = {\n//         good: 0,\n//         neutral: 0,\n//         bad: 0\n//     }\n\n//     countTotalFeedback = () => {\n// const { good, neutral, bad } = this.state;\n// const total = good + neutral + bad;\n// return total;\n//     };\n\n//     countPositiveFeedbackPercentage = () => {\n//         const total = this.countTotalFeedback();\n//         const { good } = this.state;\n//         const percentage = Math.round((good / total) * 100);\n//         return percentage;\n//     };\n\n//     countFeedBack = (e) => {\n//         const name = e.target.name;\n//         this.setState(prevState => ({\n//             [name]: prevState[name] + 1,\n//         }));\n//     };\n\n//     render() {\n//         const { good, neutral, bad } = this.state;\n//         const total = this.countTotalFeedback();\n//         const positive = this.countPositiveFeedbackPercentage();\n\n//         return (\n//             <>\n//     <Section title=\"Please leave feedback\">\n//         <FeedbackOptions\n//             option={['good', 'neutral', 'bad']}\n//             onLeaveFeedback={this.countFeedBack}\n//         />\n//         {total === 0 ? <Notification message=\"No feedback given\"></Notification> : <Statistics\n//             title=\"Statistics\"\n//             good={good}\n//             neutral={neutral}\n//             bad={bad}\n//             total={total}\n//             positivePercentage={positive}\n//         />}\n//     </Section>\n// </>\n//         );\n//     }\n// }\n\n// export default FeedBack;\n","// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport \"./App.css\";\nimport FeedBack from \"./components/FeedBack/FeedBack.jsx\";\n\nfunction App() {\n  return (\n    <>\n      <FeedBack />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}